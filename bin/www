#!/usr/bin/env node

/**
 * Module dependencies.
 */

const cluster = require('cluster');
const {getCurrentUser} = require("../helpers/userIdentity");


if (cluster.isMaster) {
  cluster.fork();

  cluster.on('exit', function (worker, code, signal) {
    cluster.fork();
  });

}

if (cluster.isWorker) {
  const app = require('../app');
  const http = require('http');

  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app);

  /**
   * Initialize Socket
   */

  const io = require('socket.io')(server);

  io.use(async function (socket, next) {
    if (socket.handshake.query && socket.handshake.query.token) {
      let user = await getCurrentUser(socket.handshake.query.token)
      if (!user) {
        return next(new Error('Authentication error'));
      }
      socket.user = user.dataValues;
      return next();
    } else {
      next(new Error('Authentication error'));
    }
  })
    .on('connection', socket => {
      SOCKET_LIST[socket.user.id] = socket;
      socket.on('disconnect', function (error) {
        console.log('DISCONNECTED: ' , socket.user.id + ' - ' + error);
        delete SOCKET_LIST[socket.user.id]
      });
    })


  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  console.log(`Server Listening Port : ${port}`);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    console.log(error);
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  }


}
